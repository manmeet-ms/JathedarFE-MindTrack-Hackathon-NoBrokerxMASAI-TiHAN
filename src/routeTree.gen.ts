/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ViolationsRouteImport } from './routes/violations'
import { Route as UrgesRouteImport } from './routes/urges'
import { Route as TimelineRouteImport } from './routes/timeline'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as QuotesUiRouteImport } from './routes/quotesUi'
import { Route as Notfound404RouteImport } from './routes/notfound404'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as HourlytimelineRouteImport } from './routes/hourlytimeline'
import { Route as ChronosRouteImport } from './routes/chronos'
import { Route as CheckinRouteImport } from './routes/checkin'
import { Route as BetaRouteImport } from './routes/beta'
import { Route as AnalyticsRouteImport } from './routes/analytics'
import { Route as AgreementRouteImport } from './routes/agreement'
import { Route as PRouteRouteImport } from './routes/p/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PPhilosophyRouteImport } from './routes/p/philosophy'
import { Route as PLandingRouteImport } from './routes/p/landing'
import { Route as PContactRouteImport } from './routes/p/contact'
import { Route as PAboutRouteImport } from './routes/p/about'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const ViolationsRoute = ViolationsRouteImport.update({
  id: '/violations',
  path: '/violations',
  getParentRoute: () => rootRouteImport,
} as any)
const UrgesRoute = UrgesRouteImport.update({
  id: '/urges',
  path: '/urges',
  getParentRoute: () => rootRouteImport,
} as any)
const TimelineRoute = TimelineRouteImport.update({
  id: '/timeline',
  path: '/timeline',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const QuotesUiRoute = QuotesUiRouteImport.update({
  id: '/quotesUi',
  path: '/quotesUi',
  getParentRoute: () => rootRouteImport,
} as any)
const Notfound404Route = Notfound404RouteImport.update({
  id: '/notfound404',
  path: '/notfound404',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const HourlytimelineRoute = HourlytimelineRouteImport.update({
  id: '/hourlytimeline',
  path: '/hourlytimeline',
  getParentRoute: () => rootRouteImport,
} as any)
const ChronosRoute = ChronosRouteImport.update({
  id: '/chronos',
  path: '/chronos',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckinRoute = CheckinRouteImport.update({
  id: '/checkin',
  path: '/checkin',
  getParentRoute: () => rootRouteImport,
} as any)
const BetaRoute = BetaRouteImport.update({
  id: '/beta',
  path: '/beta',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsRoute = AnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRouteImport,
} as any)
const AgreementRoute = AgreementRouteImport.update({
  id: '/agreement',
  path: '/agreement',
  getParentRoute: () => rootRouteImport,
} as any)
const PRouteRoute = PRouteRouteImport.update({
  id: '/p',
  path: '/p',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PPhilosophyRoute = PPhilosophyRouteImport.update({
  id: '/philosophy',
  path: '/philosophy',
  getParentRoute: () => PRouteRoute,
} as any)
const PLandingRoute = PLandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => PRouteRoute,
} as any)
const PContactRoute = PContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PRouteRoute,
} as any)
const PAboutRoute = PAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/p': typeof PRouteRouteWithChildren
  '/agreement': typeof AgreementRoute
  '/analytics': typeof AnalyticsRoute
  '/beta': typeof BetaRoute
  '/checkin': typeof CheckinRoute
  '/chronos': typeof ChronosRoute
  '/hourlytimeline': typeof HourlytimelineRoute
  '/leaderboard': typeof LeaderboardRoute
  '/notfound404': typeof Notfound404Route
  '/quotesUi': typeof QuotesUiRoute
  '/settings': typeof SettingsRoute
  '/timeline': typeof TimelineRoute
  '/urges': typeof UrgesRoute
  '/violations': typeof ViolationsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/p/about': typeof PAboutRoute
  '/p/contact': typeof PContactRoute
  '/p/landing': typeof PLandingRoute
  '/p/philosophy': typeof PPhilosophyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/p': typeof PRouteRouteWithChildren
  '/agreement': typeof AgreementRoute
  '/analytics': typeof AnalyticsRoute
  '/beta': typeof BetaRoute
  '/checkin': typeof CheckinRoute
  '/chronos': typeof ChronosRoute
  '/hourlytimeline': typeof HourlytimelineRoute
  '/leaderboard': typeof LeaderboardRoute
  '/notfound404': typeof Notfound404Route
  '/quotesUi': typeof QuotesUiRoute
  '/settings': typeof SettingsRoute
  '/timeline': typeof TimelineRoute
  '/urges': typeof UrgesRoute
  '/violations': typeof ViolationsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/p/about': typeof PAboutRoute
  '/p/contact': typeof PContactRoute
  '/p/landing': typeof PLandingRoute
  '/p/philosophy': typeof PPhilosophyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/p': typeof PRouteRouteWithChildren
  '/agreement': typeof AgreementRoute
  '/analytics': typeof AnalyticsRoute
  '/beta': typeof BetaRoute
  '/checkin': typeof CheckinRoute
  '/chronos': typeof ChronosRoute
  '/hourlytimeline': typeof HourlytimelineRoute
  '/leaderboard': typeof LeaderboardRoute
  '/notfound404': typeof Notfound404Route
  '/quotesUi': typeof QuotesUiRoute
  '/settings': typeof SettingsRoute
  '/timeline': typeof TimelineRoute
  '/urges': typeof UrgesRoute
  '/violations': typeof ViolationsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/p/about': typeof PAboutRoute
  '/p/contact': typeof PContactRoute
  '/p/landing': typeof PLandingRoute
  '/p/philosophy': typeof PPhilosophyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/p'
    | '/agreement'
    | '/analytics'
    | '/beta'
    | '/checkin'
    | '/chronos'
    | '/hourlytimeline'
    | '/leaderboard'
    | '/notfound404'
    | '/quotesUi'
    | '/settings'
    | '/timeline'
    | '/urges'
    | '/violations'
    | '/auth/login'
    | '/auth/register'
    | '/p/about'
    | '/p/contact'
    | '/p/landing'
    | '/p/philosophy'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/p'
    | '/agreement'
    | '/analytics'
    | '/beta'
    | '/checkin'
    | '/chronos'
    | '/hourlytimeline'
    | '/leaderboard'
    | '/notfound404'
    | '/quotesUi'
    | '/settings'
    | '/timeline'
    | '/urges'
    | '/violations'
    | '/auth/login'
    | '/auth/register'
    | '/p/about'
    | '/p/contact'
    | '/p/landing'
    | '/p/philosophy'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/p'
    | '/agreement'
    | '/analytics'
    | '/beta'
    | '/checkin'
    | '/chronos'
    | '/hourlytimeline'
    | '/leaderboard'
    | '/notfound404'
    | '/quotesUi'
    | '/settings'
    | '/timeline'
    | '/urges'
    | '/violations'
    | '/auth/login'
    | '/auth/register'
    | '/p/about'
    | '/p/contact'
    | '/p/landing'
    | '/p/philosophy'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PRouteRoute: typeof PRouteRouteWithChildren
  AgreementRoute: typeof AgreementRoute
  AnalyticsRoute: typeof AnalyticsRoute
  BetaRoute: typeof BetaRoute
  CheckinRoute: typeof CheckinRoute
  ChronosRoute: typeof ChronosRoute
  HourlytimelineRoute: typeof HourlytimelineRoute
  LeaderboardRoute: typeof LeaderboardRoute
  Notfound404Route: typeof Notfound404Route
  QuotesUiRoute: typeof QuotesUiRoute
  SettingsRoute: typeof SettingsRoute
  TimelineRoute: typeof TimelineRoute
  UrgesRoute: typeof UrgesRoute
  ViolationsRoute: typeof ViolationsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/violations': {
      id: '/violations'
      path: '/violations'
      fullPath: '/violations'
      preLoaderRoute: typeof ViolationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/urges': {
      id: '/urges'
      path: '/urges'
      fullPath: '/urges'
      preLoaderRoute: typeof UrgesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/timeline': {
      id: '/timeline'
      path: '/timeline'
      fullPath: '/timeline'
      preLoaderRoute: typeof TimelineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quotesUi': {
      id: '/quotesUi'
      path: '/quotesUi'
      fullPath: '/quotesUi'
      preLoaderRoute: typeof QuotesUiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notfound404': {
      id: '/notfound404'
      path: '/notfound404'
      fullPath: '/notfound404'
      preLoaderRoute: typeof Notfound404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hourlytimeline': {
      id: '/hourlytimeline'
      path: '/hourlytimeline'
      fullPath: '/hourlytimeline'
      preLoaderRoute: typeof HourlytimelineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chronos': {
      id: '/chronos'
      path: '/chronos'
      fullPath: '/chronos'
      preLoaderRoute: typeof ChronosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkin': {
      id: '/checkin'
      path: '/checkin'
      fullPath: '/checkin'
      preLoaderRoute: typeof CheckinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beta': {
      id: '/beta'
      path: '/beta'
      fullPath: '/beta'
      preLoaderRoute: typeof BetaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agreement': {
      id: '/agreement'
      path: '/agreement'
      fullPath: '/agreement'
      preLoaderRoute: typeof AgreementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/p': {
      id: '/p'
      path: '/p'
      fullPath: '/p'
      preLoaderRoute: typeof PRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/p/philosophy': {
      id: '/p/philosophy'
      path: '/philosophy'
      fullPath: '/p/philosophy'
      preLoaderRoute: typeof PPhilosophyRouteImport
      parentRoute: typeof PRouteRoute
    }
    '/p/landing': {
      id: '/p/landing'
      path: '/landing'
      fullPath: '/p/landing'
      preLoaderRoute: typeof PLandingRouteImport
      parentRoute: typeof PRouteRoute
    }
    '/p/contact': {
      id: '/p/contact'
      path: '/contact'
      fullPath: '/p/contact'
      preLoaderRoute: typeof PContactRouteImport
      parentRoute: typeof PRouteRoute
    }
    '/p/about': {
      id: '/p/about'
      path: '/about'
      fullPath: '/p/about'
      preLoaderRoute: typeof PAboutRouteImport
      parentRoute: typeof PRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface PRouteRouteChildren {
  PAboutRoute: typeof PAboutRoute
  PContactRoute: typeof PContactRoute
  PLandingRoute: typeof PLandingRoute
  PPhilosophyRoute: typeof PPhilosophyRoute
}

const PRouteRouteChildren: PRouteRouteChildren = {
  PAboutRoute: PAboutRoute,
  PContactRoute: PContactRoute,
  PLandingRoute: PLandingRoute,
  PPhilosophyRoute: PPhilosophyRoute,
}

const PRouteRouteWithChildren =
  PRouteRoute._addFileChildren(PRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PRouteRoute: PRouteRouteWithChildren,
  AgreementRoute: AgreementRoute,
  AnalyticsRoute: AnalyticsRoute,
  BetaRoute: BetaRoute,
  CheckinRoute: CheckinRoute,
  ChronosRoute: ChronosRoute,
  HourlytimelineRoute: HourlytimelineRoute,
  LeaderboardRoute: LeaderboardRoute,
  Notfound404Route: Notfound404Route,
  QuotesUiRoute: QuotesUiRoute,
  SettingsRoute: SettingsRoute,
  TimelineRoute: TimelineRoute,
  UrgesRoute: UrgesRoute,
  ViolationsRoute: ViolationsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
